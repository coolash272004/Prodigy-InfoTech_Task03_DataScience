runfile('F:/Prodigy_Projects/Task3/Task_03_DataScience.py', wdir='F:/Prodigy_Projects/Task3')
This is Var Grp <pandas.core.groupby.generic.DataFrameGroupBy object at 0x000001762AAAA6F0>
This is Var Count job
admin.           133
blue-collar       61
entrepreneur       8
housemaid         11
management        30
retired           38
self-employed     13
services          35
student           19
technician        80
unemployed        19
unknown            4
Name: job, dtype: int64
>>>>> Index(['admin.', 'blue-collar', 'entrepreneur', 'housemaid', 'management',
       'retired', 'self-employed', 'services', 'student', 'technician',
       'unemployed', 'unknown'],
      dtype='object', name='job')
This is Var Grp <pandas.core.groupby.generic.DataFrameGroupBy object at 0x000001762AAFD580>
This is Var Count job
admin.           879
blue-collar      823
entrepreneur     140
housemaid         99
management       294
retired          128
self-employed    146
services         358
student           63
technician       611
unemployed        92
unknown           35
Name: job, dtype: int64
>>>>> Index(['admin.', 'blue-collar', 'entrepreneur', 'housemaid', 'management',
       'retired', 'self-employed', 'services', 'student', 'technician',
       'unemployed', 'unknown'],
      dtype='object', name='job')
This is Merged Plot:              key_0  job_x  job_y
0          admin.    133    879
1     blue-collar     61    823
2    entrepreneur      8    140
3       housemaid     11     99
4      management     30    294
5         retired     38    128
6   self-employed     13    146
7        services     35    358
8         student     19     63
9      technician     80    611
10     unemployed     19     92
11        unknown      4     35
Basic Decision Tree Classifier Operations
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 4119 entries, 0 to 4118
Data columns (total 21 columns):
 #   Column          Non-Null Count  Dtype  
---  ------          --------------  -----  
 0   age             4119 non-null   int64  
 1   job             4119 non-null   object 
 2   marital         4119 non-null   object 
 3   education       4119 non-null   object 
 4   default         4119 non-null   object 
 5   housing         4119 non-null   object 
 6   loan            4119 non-null   object 
 7   contact         4119 non-null   object 
 8   month           4119 non-null   object 
 9   day_of_week     4119 non-null   object 
 10  duration        4119 non-null   int64  
 11  campaign        4119 non-null   int64  
 12  pdays           4119 non-null   int64  
 13  previous        4119 non-null   int64  
 14  poutcome        4119 non-null   object 
 15  emp.var.rate    4119 non-null   float64
 16  cons.price.idx  4119 non-null   float64
 17  cons.conf.idx   4119 non-null   float64
 18  euribor3m       4119 non-null   float64
 19  nr.employed     4119 non-null   float64
 20  y               4119 non-null   object 
dtypes: float64(5), int64(5), object(11)
memory usage: 675.9+ KB
This is to check info. in df 
: None
This helps us to describe df 
:                age     duration  ...    euribor3m  nr.employed
count  4119.000000  4119.000000  ...  4119.000000  4119.000000
mean     40.113620   256.788055  ...     3.621356  5166.481695
std      10.313362   254.703736  ...     1.733591    73.667904
min      18.000000     0.000000  ...     0.635000  4963.600000
25%      32.000000   103.000000  ...     1.334000  5099.100000
50%      38.000000   181.000000  ...     4.857000  5191.000000
75%      47.000000   317.000000  ...     4.961000  5228.100000
max      88.000000  3643.000000  ...     5.045000  5228.100000

[8 rows x 10 columns]
This is to print first 5 rows of df 
:    age          job  marital  ... euribor3m nr.employed   y
0   30  blue-collar  married  ...     1.313      5099.1  no
1   39     services   single  ...     4.855      5191.0  no
2   25     services  married  ...     4.962      5228.1  no
3   38     services  married  ...     4.959      5228.1  no
4   47       admin.  married  ...     4.191      5195.8  no

[5 rows x 21 columns]
This is to print last 5 rows of df 
:       age         job  marital  ... euribor3m nr.employed   y
4114   30      admin.  married  ...     4.958      5228.1  no
4115   39      admin.  married  ...     4.959      5228.1  no
4116   27     student   single  ...     1.354      5099.1  no
4117   58      admin.  married  ...     4.966      5228.1  no
4118   34  management   single  ...     4.120      5195.8  no

[5 rows x 21 columns]
DecisionTreeClassifier()
This is the prediction ['no' 'no' 'yes' ... 'no' 'no' 'no']
This is Evaluation of the Decision Tree Model
              precision    recall  f1-score   support

          no       0.90      1.00      0.94      1106
         yes       0.40      0.02      0.03       130

    accuracy                           0.89      1236
   macro avg       0.65      0.51      0.49      1236
weighted avg       0.84      0.89      0.85      1236

[[1103    3]
 [ 128    2]]